"""add is_active to users

Revision ID: c4ca709cb481
Revises: 
Create Date: 2025-08-29 17:18:51.697650

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c4ca709cb481'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_memberships_club_id'), table_name='memberships')
    op.drop_index(op.f('ix_memberships_user_id'), table_name='memberships')
    op.drop_table('memberships')
    op.drop_index(op.f('ix_attendance_session_id'), table_name='attendances')
    op.drop_index(op.f('ix_attendance_user_id'), table_name='attendances')
    op.drop_table('attendances')
    op.drop_table('clubs')
    op.drop_index(op.f('ix_sessions_plan_id_starts_at'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_index(op.f('ix_plans_club_id'), table_name='plans')
    op.drop_table('plans')
    op.drop_index(op.f('ix_exercises_plan_id'), table_name='exercises')
    op.drop_table('exercises')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('athlete', 'trainer', 'admin', name='userrole'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('exercises',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sets', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('repetitions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('day_label', postgresql.ENUM('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', name='daylabel'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name=op.f('exercises_plan_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('exercises_pkey')),
    sa.UniqueConstraint('plan_id', 'position', name=op.f('uq_exercises_plan_position'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_exercises_plan_id'), 'exercises', ['plan_id'], unique=False)
    op.create_table('plans',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('plans_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('plan_type', postgresql.ENUM('club', 'personal', name='plantype'), autoincrement=False, nullable=False),
    sa.Column('club_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['club_id'], ['clubs.id'], name='plans_club_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='plans_created_by_fkey', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='plans_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_plans_club_id'), 'plans', ['club_id'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sessions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('starts_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('ends_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='sessions_created_by_fkey'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='sessions_plan_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_sessions_plan_id_starts_at'), 'sessions', ['plan_id', 'starts_at'], unique=False)
    op.create_table('clubs',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('clubs_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='clubs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('attendances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('present', 'excused', 'absent', name='attendancestatus'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('attendances_session_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('attendances_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('attendances_pkey')),
    sa.UniqueConstraint('session_id', 'user_id', name=op.f('uq_attendance_session_user'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_attendance_user_id'), 'attendances', ['user_id'], unique=False)
    op.create_index(op.f('ix_attendance_session_id'), 'attendances', ['session_id'], unique=False)
    op.create_table('memberships',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('club_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('member', 'coach', name='membershiprole'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['club_id'], ['clubs.id'], name=op.f('memberships_club_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('memberships_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('memberships_pkey')),
    sa.UniqueConstraint('club_id', 'user_id', name=op.f('uq_membership_club_user'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_memberships_user_id'), 'memberships', ['user_id'], unique=False)
    op.create_index(op.f('ix_memberships_club_id'), 'memberships', ['club_id'], unique=False)
    # ### end Alembic commands ###
